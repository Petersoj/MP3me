import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

plugins {
    id "java"
    id "application"

    // For Java 9 modularity integration with Gradle
    id "org.javamodularity.moduleplugin" version "1.6.0"

    // For creating a distributable image/app (so users don't have to install Java)
    id "org.beryx.jlink" version "2.17.1"
}

enum OS {
    MAC,
    WINDOWS,
    LINUX,
    UNKNOWN
}

OS os = OS.UNKNOWN;
String osName = System.getProperty("os.name").toLowerCase();
if (osName.contains("mac")) {
    os = OS.MAC;
} else if (osName.contains("windows")) {
    os = OS.WINDOWS;
} else if (osName.contains("linux")) {
    os = OS.LINUX;
} else {
    throw new IllegalStateException("Cannot build with: " + osName)
}

group "net.jacobpeterson"
version "1.0-SNAPSHOT"
description = "Download Youtube, Soundcloud, and others as a song (add album cover image, artist name, and more)."

sourceCompatibility = 11 // Use JDK 11

repositories {
    flatDir {
        dirs "lib"
    }

    mavenCentral()
}

dependencies {
    implementation group: "com.google.code.gson", name: "gson", version: "2.8.5"
    if (os == OS.MAC) {
        implementation name: "swt-4.15M1-cocoa-macosx-x86_64"
    } else if (os == OS.WINDOWS) {
        implementation name: "swt-4.15M1-win32-win32-x86_64"
    } else if (os == OS.LINUX) {
        implementation name: "swt-4.15M1-gtk-linux-x86_64"
    }
}

mainClassName = "$moduleName/net.jacobpeterson.MP3me"

if (os == OS.MAC) {
    applicationDefaultJvmArgs = ["-XstartOnFirstThread"]
}

String jpackageInstallerExtension = "exe"
jlink {
    options.addAll("--strip-debug", "--no-header-files", "--no-man-pages")

    launcher {
        name = "MP3me"

        if (os == OS.MAC) {
            jvmArgs = ["-XstartOnFirstThread"]
        }
    }

    jpackage {
        // Make sure Java 14 is being used or the home for it is set. This is for the use of jpackage.
        String javaVersionString = System.getProperty("java.version")
        int javaMajorVersion = Integer.valueOf(javaVersionString.substring(0, javaVersionString.indexOf(".")))
        String java14Home = System.getenv("JAVA_HOME_14")
        if (javaMajorVersion >= 14) {
            logger.info("Using current Java version for jpackage: " + javaVersionString)
            java14Home = System.getProperty("java.home")
        } else if (java14Home == null || java14Home.isEmpty()) {
            logger.info("You must set the JAVA_HOME_14 environment variable or " +
                    "install JDK 14 to use jpackage.")
        } else {
            logger.info("Using JAVA_HOME_14 environment variable for jpackage: " + java14Home)
        }

        // Set OS-specific options
        String iconPath
        if (os == OS.MAC) {
            iconPath = "assets" + File.separator + "Logo.icns"
            skipInstaller = true // Just generate a .app image
        } else if (os == OS.WINDOWS) {
            iconPath = "assets" + File.separator + "Logo.ico"
            installerType = jpackageInstallerExtension = "exe"
            installerOptions = ["--win-per-user-install", "--win-menu", "--win-shortcut"]
        } else if (os == OS.LINUX) {
            iconPath = "assets" + File.separator + "Logo.png"
            skipInstaller = true // Just generate an image/shell script
        }

        // Set jpackage options
        jpackageHome = java14Home
        outputDir = "jpackage" + File.separator + os.name().toLowerCase()
        appVersion = version.toString().replace("-SNAPSHOT", "")
        imageOptions = ["--icon", new File(projectDir.getAbsolutePath(), iconPath).getAbsolutePath()]
    }
}

task packageJpackage() {
    doLast {
        File jpackageOutputDir = new File(buildDir, "jpackage/" + os.name().toLowerCase())

        if (os == OS.MAC) {
            File jpackageMacImage = new File(jpackageOutputDir, project.name + ".app")

            logger.info("Codesigning mac .app")
            exec {
                commandLine "codesign", "--force", "--deep", "--sign", "-", jpackageMacImage.getAbsolutePath()
            }

            logger.info("Compressing app image into zip file: " + jpackageMacImage.toPath())
            compressDirectory(jpackageMacImage.toPath())
        } else if (os == OS.WINDOWS) {
            File jpackageWindowsInstaller = new File(jpackageOutputDir, project.name + "-" +
                    version.toString().replace("-SNAPSHOT", "") + "." + jpackageInstallerExtension)

            logger.info("Renaming Windows installer")
            Files.move(jpackageWindowsInstaller.toPath(),
                    jpackageWindowsInstaller.toPath().resolveSibling(project.name + "." + jpackageInstallerExtension))
        } else if (os == OS.LINUX) {
            File jpackageLinuxImage = new File(jpackageOutputDir, project.name)

            logger.info("Compressing app image into zip file: " + jpackageLinuxImage.toPath())
            compressDirectory(jpackageLinuxImage.toPath())
        }
    }
}

jpackage.finalizedBy(packageJpackage)

//
// Helper methods below here
//

static void compressFile(Path filePath) {
    String zipFileName = filePath.toString() + ".zip"
    try {
        final ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFileName))
        zipOutputStream.putNextEntry(new ZipEntry(filePath.getFileName().toString()))

        byte[] bytes = Files.readAllBytes(filePath)
        zipOutputStream.write(bytes, 0, bytes.length)
        zipOutputStream.closeEntry()
        zipOutputStream.close()
    } catch (IOException e) {
        e.printStackTrace()
    }
}

static void compressDirectory(Path dirPath) {
    String zipFileName = dirPath.toString() + ".zip"
    try {
        final ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFileName))

        Files.walkFileTree(dirPath, new SimpleFileVisitor<Path>() {
            @Override
            FileVisitResult visitFile(Path file, BasicFileAttributes attributes) {
                try {
                    Path targetFile = dirPath.getParent().relativize(file)
                    zipOutputStream.putNextEntry(new ZipEntry(targetFile.toString()))

                    byte[] bytes = Files.readAllBytes(file)
                    zipOutputStream.write(bytes, 0, bytes.length)
                    zipOutputStream.closeEntry()
                } catch (IOException e) {
                    e.printStackTrace()
                }
                return FileVisitResult.CONTINUE
            }
        })
        zipOutputStream.close()
    } catch (IOException e) {
        e.printStackTrace()
    }
}
